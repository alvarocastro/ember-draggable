{"version":3,"file":"sortable-item.js","sources":["../../src/modifiers/sortable-item.js"],"sourcesContent":["import { modifier } from 'ember-modifier';\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\nimport draggableItem from './draggable-item.js';\nimport dropTarget from './drop-target.js';\n\n/**\n * Modifier that makes an element both a draggable item and drop target.\n *\n * @param {DOMElement} element Draggable DOM element.\n * @param {any} options.data Data to associate with the item.\n * @param {String} [options.group] Name of the group this item belongs to.\n * @param {Array} [options.accepts] Array of types this target accepts.\n * @param {String} [options.dragHandleElement] Element that acts as the drag handle.\n * @param {String} [options.direction=\"vertical\"] Shortcut to define presets of `allowedEdges`. Options: \"horizontal\", \"vertical\".\n * @param {Array} [options.allowedEdges] Array of allowed edges to detect on drop. Options: \"top\", \"bottom\", \"left\", \"right\".\n * @param {Boolean} [options.allowDropOnItself=false] Allow an element to drop on itself if it's both a draggable item and drop target.\n * @param {Boolean} [options.allowDropOnChildren=false] Allow the target to receive drops from a parent draggable (this option is valid for nested targets)\n * @param {Boolean} [disabled] Prevents the element to be dragged or receive drops.\n * @param {Boolean} [disabledDrag] Prevents the element to be dragged.\n * @param {Boolean} [disabledDrop] Prevents the element to receive drops.\n * @param {String} [options.isDraggingClass] Class added to the element when it is being drag.\n * @param {String} [options.isOnTargetClass] Class added to the element when an item is dragged over.\n * @param {Function} [options.canDrop] Callback used to conditionally allow drops.\n * @param {Function} [options.onDrop] Callback fired when an item is dropped.\n * @param {Function} [options.onHover] Callback fired when an item is dragged over.\n * @param {Function} [option.onDragEnter] Callback fired when a dragged item enters this target.\n * @param {Function} [option.onDragLeave] Callback fired when a dragged item leaves this target.\n * @param {Function} [options.onDragStart] Callback fired when the drag starts.\n * @param {Function} [options.onDragEnd] Callback fired when the item is dropped.\n */\nexport default modifier(\n  function sortableItem(element, positional, named) {\n    return combine(\n      draggableItem(element, positional, {\n        ...named,\n        disabled: named.disabled ?? named.disabledDrag,\n      }),\n      dropTarget(element, positional, {\n        ...named,\n        disabled: named.disabled ?? named.disabledDrop,\n      }),\n    );\n  },\n  { eager: false },\n);\n"],"names":["modifier","sortableItem","element","positional","named","combine","draggableItem","disabled","disabledDrag","dropTarget","disabledDrop","eager"],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAeA,QAAQ,CACrB,SAASC,YAAYA,CAACC,OAAO,EAAEC,UAAU,EAAEC,KAAK,EAAE;AAChD,EAAA,OAAOC,OAAO,CACZC,aAAa,CAACJ,OAAO,EAAEC,UAAU,EAAE;AACjC,IAAA,GAAGC,KAAK;AACRG,IAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACI,YAAAA;AACpC,GAAC,CAAC,EACFC,UAAU,CAACP,OAAO,EAAEC,UAAU,EAAE;AAC9B,IAAA,GAAGC,KAAK;AACRG,IAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACM,YAAAA;AACpC,GAAC,CACH,CAAC,CAAA;AACH,CAAC,EACD;AAAEC,EAAAA,KAAK,EAAE,KAAA;AAAM,CACjB,CAAC;;;;"}