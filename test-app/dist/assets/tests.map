{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","test-app/tests/helpers/index.js","test-app/tests/integration/modifiers/draggable-item.js","test-app/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"test-app/tests/helpers/index\", [\"exports\", \"ember-qunit\"], function (_exports, _emberQunit) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.setupApplicationTest = setupApplicationTest;\n  _exports.setupRenderingTest = setupRenderingTest;\n  _exports.setupTest = setupTest;\n  0; //eaimeta@70e063a35619d71f0,\"ember-qunit\"eaimeta@70e063a35619d71f\n  // This file exists to provide wrappers around ember-qunit's\n  // test setup functions. This way, you can easily extend the setup that is\n  // needed per test type.\n\n  function setupApplicationTest(hooks, options) {\n    (0, _emberQunit.setupApplicationTest)(hooks, options);\n\n    // Additional setup for application tests can be done here.\n    //\n    // For example, if you need an authenticated session for each\n    // application test, you could do:\n    //\n    // hooks.beforeEach(async function () {\n    //   await authenticateSession(); // ember-simple-auth\n    // });\n    //\n    // This is also a good place to call test setup functions coming\n    // from other addons:\n    //\n    // setupIntl(hooks); // ember-intl\n    // setupMirage(hooks); // ember-cli-mirage\n  }\n  function setupRenderingTest(hooks, options) {\n    (0, _emberQunit.setupRenderingTest)(hooks, options);\n\n    // Additional setup for rendering tests can be done here.\n  }\n  function setupTest(hooks, options) {\n    (0, _emberQunit.setupTest)(hooks, options);\n\n    // Additional setup for unit tests can be done here.\n  }\n});","/*\nimport { module, test } from 'qunit';\nimport { setupRenderingTest } from 'ember-qunit';\nimport { settled, find, findAll, render, triggerKeyEvent, waitUntil } from '@ember/test-helpers';\nimport { set } from '@ember/object';\nimport { reorder } from 'ember-sortable/test-support';\nimport hbs from 'htmlbars-inline-precompile';\n\nmodule('Integration | Modifier | sortable-group', function (hooks) {\n  setupRenderingTest(hooks);\n\n  test('Works with items added after render', async function (assert) {\n    this.items = ['Uno', 'Dos', 'Tres'];\n\n    this.update = (items) => {\n      set(this, 'items', items);\n    };\n\n    await render(hbs`\n      <ol id=\"test-list\" {{sortable-group onChange=this.update}}>\n        {{#each this.items as |item|}}\n          <li {{sortable-item model=item}}>{{item}}</li>\n        {{/each}}\n      </ol>\n    `);\n\n    set(this, 'items', [...this.items, 'Quatro']);\n\n    await settled();\n\n    let order = findAll('li');\n\n    await reorder('mouse', 'li', order[3], order[1], order[0], order[2]);\n    assert.equal(contents('#test-list'), 'Quatro Dos Uno Tres');\n\n    set(this, 'items', this.items.slice(1));\n\n    await settled();\n\n    await reorder('mouse', 'li', order[2], order[1], order[0]);\n\n    assert.equal(contents('#test-list'), 'Tres Dos Uno');\n  });\n});\n*/\ndefine(\"test-app/tests/integration/modifiers/draggable-item\", [], function () {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71feaimeta@70e063a35619d71f\n});","define(\"test-app/tests/test-helper\", [\"test-app/app\", \"test-app/config/environment\", \"qunit\", \"@ember/test-helpers\", \"qunit-dom\", \"ember-qunit\"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"test-app/app\",0,\"test-app/config/environment\",0,\"qunit\",0,\"@ember/test-helpers\",0,\"qunit-dom\",0,\"ember-qunit\"eaimeta@70e063a35619d71f\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _emberQunit.start)();\n});","define('test-app/config/environment', [], function() {\n  var prefix = 'test-app';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('test-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}